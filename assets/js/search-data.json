{
  
    
        "post0": {
            "title": "Can we predict which startup will be aquired?",
            "content": ". I used a neural network to encode all the categorical features and extracted the ebedding layers for further analysis. . Instead of a simple label encoding of each feature, we create a vector representation. . The sample below shows a vector of length 3. The advantage is that we are able to transform discreet variable into vectors that are continous and meaningful. . &gt; ### . In the Fast.AI book, Deep Learning for Coders, an excellent example of the benefits of categorical embedding is provided. . On the left is a plot of the embedding matrix for the possible values of the State category. For a categorical variable we call the possible values of the variable its &quot;levels&quot; (or &quot;categories&quot; or &quot;classes&quot;), so here one level is &quot;Berlin,&quot; another is &quot;Hamburg,&quot; etc. On the right is a map of Germany. The actual physical locations of the German states were not part of the provided data, yet the model itself learned where they must be, based only on the behavior of store sales! . . The overall strategy to predict the success (the purchase of the startup) was the following: . Import and clean the data | Creaate additional features | Run data through a neural network to convert categorical data to continous | Train ML models on the latent space of the neural network | Select the most confident prediction | Ensembling the embeddings . What makes this code unique is the fact that I took the same data and ran it through 4 different neural networks with each one set to a different embedding size. . For each neural network, I extracted the latent layers and trained both Random Forest and XGBoost models on each embedding space and then ensembled the predictions and probabilites. The end result was an improvement of &gt;6%. . models = [ # (&#39;RF&#39;, RandomForestClassifier()), (&#39;RF2&#39;, RandomForestClassifier(max_depth=200, random_state=0, oob_score=True, min_samples_split=30)), # (&#39;XGB&#39;, XGBClassifier()), # (&#39;XGB2&#39;, XGBClassifier(max_depth=3,n_estimators=100,learning_rate=.01)) ] procs_nn = [Categorify, FillMissing, Normalize] to_nn = TabularPandas(df_nn_final, procs_nn, cat_nn, cont_nn, splits=splits, y_names=dep_var) dls = to_nn.dataloaders(512) emb_szs={&#39;city&#39;:1, &#39;market&#39;:1,&#39;region&#39;:1,&#39;founded_month&#39;:1, &#39;founded_quarter&#39;:1,&#39;state_code&#39;:1} _, embeded_xs_1, xs_valid_1 = nn_embeddings(emb_szs) embed_1_df = run_exps(models, embeded_xs_1, y_train, xs_valid_1, valid_y, &#39;embed_1&#39;) emb_szs={&#39;city&#39;:2, &#39;market&#39;:2,&#39;region&#39;:2,&#39;founded_month&#39;:2, &#39;founded_quarter&#39;:2,&#39;state_code&#39;:2} _, embeded_xs_2, xs_valid_2 = nn_embeddings(emb_szs) embed_2_df = run_exps(models, embeded_xs_2, y_train, xs_valid_2, valid_y, &#39;embed_2&#39;) emb_szs={&#39;city&#39;:3, &#39;market&#39;:3,&#39;region&#39;:3,&#39;founded_month&#39;:3, &#39;founded_quarter&#39;:3,&#39;state_code&#39;:3} _, embeded_xs_2, xs_valid_2 = nn_embeddings(emb_szs) embed_hand_df = run_exps(models, embeded_xs_hand, y_train, xs_valid_hand, valid_y, &#39;embed_hand&#39;) _, embeded_xs_default, xs_valid_default = nn_embeddings() embed_default_df = run_exps(models, embeded_xs_default, y_train, xs_valid_default, valid_y, &#39;embed_default&#39;) . epoch train_loss valid_loss accuracy time . 0 | 0.662463 | 0.652477 | 0.646552 | 00:00 | . 1 | 0.629649 | 0.629694 | 0.665230 | 00:00 | . 2 | 0.598863 | 0.608499 | 0.689655 | 00:00 | . No improvement since epoch 0: early stopping RF2 precision recall f1-score support closed 0.70 0.57 0.63 308 aquired 0.70 0.80 0.75 388 accuracy 0.70 696 macro avg 0.70 0.69 0.69 696 weighted avg 0.70 0.70 0.70 696 . epoch train_loss valid_loss accuracy time . 0 | 0.670005 | 0.646368 | 0.650862 | 00:00 | . 1 | 0.642237 | 0.638300 | 0.649425 | 00:00 | . 2 | 0.617361 | 0.618155 | 0.676724 | 00:00 | . No improvement since epoch 0: early stopping RF2 precision recall f1-score support closed 0.67 0.57 0.62 308 aquired 0.70 0.78 0.73 388 accuracy 0.69 696 macro avg 0.68 0.67 0.68 696 weighted avg 0.69 0.69 0.68 696 . epoch train_loss valid_loss accuracy time . 0 | 0.685383 | 0.671815 | 0.600575 | 00:00 | . 1 | 0.643899 | 0.635727 | 0.665230 | 00:00 | . 2 | 0.610659 | 0.633660 | 0.659483 | 00:00 | . No improvement since epoch 0: early stopping RF2 precision recall f1-score support closed 0.68 0.60 0.63 308 aquired 0.71 0.77 0.74 388 accuracy 0.70 696 macro avg 0.69 0.69 0.69 696 weighted avg 0.69 0.70 0.69 696 . epoch train_loss valid_loss accuracy time . 0 | 0.674322 | 0.679839 | 0.576149 | 00:00 | . 1 | 0.633507 | 0.661414 | 0.633621 | 00:00 | . 2 | 0.587562 | 0.638694 | 0.640805 | 00:00 | . No improvement since epoch 0: early stopping RF2 precision recall f1-score support closed 0.67 0.60 0.63 308 aquired 0.70 0.76 0.73 388 accuracy 0.69 696 macro avg 0.69 0.68 0.68 696 weighted avg 0.69 0.69 0.69 696 . final3 = pd.concat([embed_1_df, embed_2_df, embed_hand_df, embed_default_df ], axis=1) . #now need to split d2 into train and valid sets X_train2, X_test2, y_train2, y_test2 = train_test_split(final3, y_test, test_size=test_size, random_state=seed) splits2 = (list(X_train2.index),list(X_test2.index)) models = [ (&#39;RF2&#39;, RandomForestClassifier(max_depth=200, random_state=0, oob_score=True, min_samples_split=30)), ] new_X = np.nan_to_num(X_train2.astype(np.float32)) new_X_test2 = np.nan_to_num(X_test2.astype(np.float32)) d3 = run_exps(models, new_X, y_train2, new_X_test2, y_test2, &#39;final3&#39;) . . RF2 precision recall f1-score support closed 0.65 0.59 0.62 54 aquired 0.76 0.80 0.78 86 accuracy 0.72 140 macro avg 0.71 0.70 0.70 140 weighted avg 0.72 0.72 0.72 140 . clf = RandomForestClassifier(max_depth=200, random_state=0, oob_score=True, min_samples_split=30) clf.fit(new_X, y_train2) print (clf.score(new_X_test2, y_test2)) . 0.7214285714285714 . company_names.iloc[471] . &#39;Callidus Biopharma&#39; . cm=confusion_matrix(pred_df.tar, pred_df.p, labels=None, sample_weight=None, normalize=None) plot_confusion_matrix(cm, [&#39;closed&#39;,&#39;aquired&#39;], normalize=None) . . decision tree . df_out = pd.merge(company_names, embeded_xs, how = &#39;right&#39;,left_index = True, right_index = True) df_out2 = pd.merge(city_names, df_out, how = &#39;right&#39;,left_index = True, right_index = True) df_out2[:2] . city name funding_total_usd funding_rounds founded_year seed venture equity_crowdfunding undisclosed convertible_note debt_financing angel grant private_equity post_ipo_equity post_ipo_debt secondary_market product_crowdfunding round_A round_B round_C round_D round_E round_F round_G round_H first_funding_year last_funding_year delta_first_fund_founded ave_rounds_per_year delta_seed_to_Round_A mean_fund_for_market median_fund_for_market delta_total_fund_mean_for_market delta_total_fund_median_for_market mean_fund_for_city median_fund_for_city delta_total_fund_mean_for_city delta_total_fund_median_for_city mean_fund_for_first_funding_year ... founded_month_2 founded_month_3 founded_month_4 founded_month_5 founded_month_6 founded_month_7 founded_month_8 founded_month_9 founded_month_10 founded_month_11 founded_month_12 founded_month_13 founded_month_14 founded_month_15 founded_month_16 founded_month_17 founded_month_18 founded_month_19 founded_month_20 founded_month_21 founded_month_22 founded_month_23 founded_month_24 founded_month_25 founded_month_26 founded_quarter_0 founded_quarter_1 founded_quarter_2 founded_quarter_3 founded_quarter_4 founded_quarter_5 founded_quarter_6 founded_quarter_7 founded_quarter_8 founded_quarter_9 founded_quarter_10 founded_quarter_11 founded_quarter_12 founded_quarter_13 founded_quarter_14 . 37 San Francisco | Acendi Interactive | -0.137297 | -0.752694 | 0.445981 | -0.261841 | -0.357561 | -0.024792 | -0.031719 | -0.060202 | -0.066855 | -0.163837 | -0.032854 | -0.075613 | -0.024524 | -0.026264 | 0.0 | -0.018956 | -0.29693 | -0.111819 | -0.273011 | -0.166394 | -0.067034 | -0.033377 | -0.018956 | 0.0 | 0.049577 | -0.478425 | -0.636856 | -0.165169 | 0.053991 | -0.027671 | 0.723271 | -0.136181 | -0.153981 | -0.240497 | -0.284279 | -0.11132 | -0.119931 | 0.024109 | ... | 0.013669 | 0.01509 | -0.003822 | -0.015373 | -0.006393 | 0.017485 | -0.007078 | 0.011269 | -0.004001 | 0.003036 | -0.008594 | -0.007402 | -0.008876 | 0.008349 | 0.006263 | 0.012332 | 0.009981 | 0.010618 | -0.012018 | -0.003986 | -0.006738 | -0.01037 | 0.004821 | 0.015092 | -0.001168 | -0.011245 | -0.004537 | 0.005212 | 0.011617 | -0.005559 | 0.007004 | 0.007672 | 0.011503 | 0.001904 | -0.000933 | -0.007103 | 0.003357 | 0.014095 | 0.008256 | 0.006791 | . 890 Boston | eegoes | -0.137239 | 0.673301 | 0.772035 | -0.261841 | -0.357309 | -0.024792 | -0.031719 | -0.060202 | -0.066855 | -0.163837 | -0.032854 | -0.075613 | -0.024524 | -0.026264 | 0.0 | -0.018956 | -0.29693 | -0.171430 | -0.273011 | -0.166394 | -0.067034 | -0.033377 | -0.018956 | 0.0 | 0.441685 | 0.366176 | -0.636856 | -0.194551 | 0.053991 | -1.138351 | -0.834174 | -0.043653 | -0.118211 | -0.128788 | -0.182533 | -0.12460 | -0.126178 | 0.330408 | ... | 0.013669 | 0.01509 | -0.003822 | -0.015373 | -0.006393 | 0.017485 | -0.007078 | 0.011269 | -0.004001 | 0.003036 | -0.008594 | -0.007402 | -0.008876 | 0.008349 | 0.006263 | 0.012332 | 0.009981 | 0.010618 | -0.012018 | -0.003986 | -0.006738 | -0.01037 | 0.004821 | 0.015092 | -0.001168 | -0.011245 | -0.004537 | 0.005212 | 0.011617 | -0.005559 | 0.007004 | 0.007672 | 0.011503 | 0.001904 | -0.000933 | -0.007103 | 0.003357 | 0.014095 | 0.008256 | 0.006791 | . 2 rows × 231 columns . cat values to embed . city 582 market 347 region 142 founded_month 152 founded_quarter 54 state_code 47 . pca = decomposition.PCA(n_components=2) pca.fit(d) X = pca.transform(d) fig = px.scatter(x=X[:, 0], y=X[:, 1], color=y.values, marginal_y=&quot;violin&quot;)#, text=df_out2.city, # marginal_x=&quot;box&quot;, trendline=&quot;ols&quot;) fig.show() . . . from sklearn import decomposition . pca = decomposition.PCA(n_components=2) pca.fit(embeded_xs) X = pca.transform(embeded_xs) y = learn.dls.targ . plt.scatter(X[:, 0], X[:, 1], c=y.values) # this is pca without embeddings . &lt;matplotlib.collections.PathCollection at 0x7f026431d940&gt; . import plotly.express as px . fig = px.scatter(x=X[:, 0], y=X[:, 1], color=y.values, marginal_y=&quot;violin&quot;, text=df_out.name, marginal_x=&quot;box&quot;, trendline=&quot;ols&quot;) . fig = px.scatter(x=X[:, 0], y=X[:, 1], color=y.values, marginal_y=&quot;violin&quot;, text=df_out2.city, marginal_x=&quot;box&quot;, trendline=&quot;ols&quot;) . fig.show() . . . from sklearn.manifold import TSNE tsne = TSNE() X = tsne.fit_transform(embeded_xs) . from sklearn.manifold import TSNE tsne = TSNE(perplexity=3.0, early_exaggeration=12.0, learning_rate=200.0, n_iter=1000) X = tsne.fit_transform(d) . # marginal_x=&quot;box&quot;, trendline=&quot;ols&quot;) fig = px.scatter(x=X_embedded[:, 0], y=X_embedded[:, 1], color=y.values, text=df_out2.city) fig.show() . . . fig = px.scatter(x=X_embedded[:, 0], y=X_embedded[:, 1], color=y.values) fig.show() . . . import seaborn as sns sns.set(rc={&#39;figure.figsize&#39;:(11.7,8.27)}) palette = sns.color_palette(&quot;bright&quot;, 10) sns.scatterplot(data=X_embedded, x=X_embedded[:,0], y=X_embedded[:,1], hue=learn.dls.targ.status) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f027574beb8&gt; . combine nn, rf+nn_ebeddings, xgb+nn_ebeddings . base_dir = root_dir + &#39;crunchbase/master&#39; path = Path(base_dir) csv_path = Path(base_dir+&#39;/investments.csv&#39;) investments_df=pd.read_csv(csv_path) . investments_df.columns . Index([&#39;company_permalink&#39;, &#39;company_name&#39;, &#39;company_category_list&#39;, &#39;company_country_code&#39;, &#39;company_state_code&#39;, &#39;company_region&#39;, &#39;company_city&#39;, &#39;investor_permalink&#39;, &#39;investor_name&#39;, &#39;investor_country_code&#39;, &#39;investor_state_code&#39;, &#39;investor_region&#39;, &#39;investor_city&#39;, &#39;funding_round_permalink&#39;, &#39;funding_round_type&#39;, &#39;funding_round_code&#39;, &#39;funded_at&#39;, &#39;raised_amount_usd&#39;], dtype=&#39;object&#39;) . investments_df.company_name.describe() . count 168646 unique 44578 top Uber freq 64 Name: company_name, dtype: object . investments_df.investor_permalink.fillna(&#39;xxx&#39;, inplace=True) investments_df = investments_df[investments_df.company_country_code==&#39;USA&#39;] unique_investors=investments_df.copy() unique_investors = investments_df[[&#39;company_name&#39;,&#39;investor_permalink&#39;,&#39;investor_name&#39;,&#39;funded_at&#39;]].copy() . unique_investors[:5] . company_name investor_permalink investor_name funded_at . 1 004 Technologies | /organization/venturecapital-de | VCDE Venture Partners | 2014-07-24 | . 3 H2O.ai | /organization/capital-one | Capital One | 2015-11-09 | . 4 H2O.ai | /organization/nexus-venture-partners | Nexus Venture Partners | 2013-05-22 | . 5 H2O.ai | /organization/nexus-venture-partners | Nexus Venture Partners | 2015-11-09 | . 6 H2O.ai | /organization/nexus-venture-partners | Nexus Venture Partners | 2013-01-03 | . unique_investors.investor_permalink=unique_investors.investor_permalink.astype(&#39;string&#39;) #unique_investors.investor_permalink=unique_investors.investor_permalink.to_string() . n=unique_investors.investor_permalink.str.split(&#39;/&#39;,n =2, expand = True) n . 0 1 2 . 1 | organization | venturecapital-de | . 3 | organization | capital-one | . 4 | organization | nexus-venture-partners | . 5 | organization | nexus-venture-partners | . 6 | organization | nexus-venture-partners | . ... ... | ... | ... | . 168630 | organization | prolog-ventures | . 168631 | organization | state-of-wisconsin-investment-board | . 168632 | organization | stonehenge-capital | . 168633 | organization | venture-investors | . 168645 | organization | startupbootcamp | . 112283 rows × 3 columns . #unique_investors.investor_permalink.fillna(&#39;xxx&#39;, inplace=True) #unique_investors.investor_permalink=unique_investors.investor_permalink.to_string() unique_investors.loc[unique_investors[&#39;investor_permalink&#39;].str.contains(&quot;organization&quot;),&#39;investor_type&#39;] = &#39;organization&#39; unique_investors.loc[unique_investors[&#39;investor_permalink&#39;].str.contains(&quot;person&quot;),&#39;investor_type&#39;] = &#39;person&#39; . unique_investors=unique_investors.drop_duplicates() unique_investors.shape . (112065, 3) . unique_investors[[&#39;investor_name&#39;,&#39;p&#39;]].nunique() . investor_name 19687 p 3 dtype: int64 . how many VC companies . org_invest=unique_investors[unique_investors.p==&#39;organization&#39;] org_invest.groupby(by=[&#39;company_name&#39;,&#39;funded_at&#39;])[&#39;investor_name&#39;].count().agg([&quot;mean&quot;, &quot;median&quot;, &quot;max&quot;, &quot;min&quot;]) . mean 2.407946 median 2.000000 max 22.000000 min 1.000000 Name: investor_name, dtype: float64 . org_invest.investor_name.describe() . count 93333 unique 11408 top New Enterprise Associates freq 810 Name: investor_name, dtype: object . unique_investors.groupby(by=[&#39;company_name&#39;])[&#39;investor_name&#39;].count() . company_name #BratPackStyle, LLC. 1 #waywire 6 . 1 //Staq.io 1 004 Technologies 1 .. zkipster 1 zlien 3 zulily 6 zuuka! 5 Ôasys 1 Name: investor_name, Length: 23040, dtype: int64 . t=unique_investors.groupby(by=[&#39;company_name&#39;,&#39;funded_at&#39;])[&#39;investor_name&#39;] t . &lt;pandas.core.groupby.generic.SeriesGroupBy object at 0x7fa5612a1908&gt; . unique_investors[&#39;total_unique_img_rows_per_patient&#39;]=unique_investors.groupby([&#39;company_name&#39;,&#39;funded_at&#39;])[&quot;investor_name&quot;].transform(&#39;nunique&#39;) . def get_investor_type(df): #if df[&#39;investor_permalink&#39;].contains(&#39;organization&#39;): if &#39;organization&#39; in df[&#39;investor_permalink&#39;]: df[&#39;p&#39;]=&#39;organization&#39; elif &#39;person&#39; in df[&#39;investor_permalink&#39;]: # elif df.investor_permalink.str.contains(&#39;person&#39;): df[&#39;p&#39;]=&#39;person&#39; else: df[&#39;p&#39;]=&#39;xxx&#39; return df unique_investors=unique_investors.apply(get_investor_type, axis=1) . unique_investors[&#39;investor_permalink&#39;][:20] . 1 /organization/venturecapital-de 3 /organization/capital-one 4 /organization/nexus-venture-partners 5 /organization/nexus-venture-partners 6 /organization/nexus-venture-partners 7 /organization/nexus-venture-partners 8 /organization/paxion-capital-partners 9 /organization/transamerica 10 /organization/transamerica-ventures 11 /person/anand-babu-periasamy 12 /person/anand-rajaraman-2 13 /person/ash-bhardwaj 14 /person/michael-marks 15 /person/rajesh-ambati 16 /person/rakesh-mathur 17 /organization/camp-one-ventures 18 /organization/camp-one-ventures 19 /organization/charles-river-ventures 20 /organization/general-catalyst-partners 21 /organization/kima-ventures Name: investor_permalink, dtype: object . unique_investors.p.value_counts() . organization 93333 person 18943 xxx 7 Name: p, dtype: int64 .",
            "url": "https://patrick-hanley.github.io/thought_experiments/2021/02/05/fastai_crunchbase.html",
            "relUrl": "/2021/02/05/fastai_crunchbase.html",
            "date": " • Feb 5, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://patrick-hanley.github.io/thought_experiments/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "ghtop redux",
            "content": ". Introduction . We recently refactored the CLI tool ghtop, created by the CEO of GitHub, Nat Friedman. Nat even described our refactor as a “tour de force”. This post describes what we learned along the way. . Motivation . Recently, we released ghapi, a new python client for the GitHub API. ghapi provides unparalleled ease of access to the GitHub api, as well as utilities for interacting with GitHub Actions. Part of our motivation for creating ghapi was to accelerate the development of build, testing and deployment tools that help us in maintaining fastai projects. . We recently started using GitHub Actions to perform a wide variety of tasks automatically like: unit and integration tests, deploying documentation, building Docker containers and Conda packages, sharing releases on Twitter, and much more. This automation is key to maintaining the vast open source fastai ecosystem with very few maintainers. . Since ghapi is central to so many of these tasks, we wanted to stress-test its efficacy against other projects. That’s when we found ghtop. This tool allows you to stream all the public events happening on GitHub to a CLI dashboard. We thought it would be a fun learning experience to refactor this code base with various fastai tools such as ghapi and fastcore, but also try out new libraries like rich. . Features we added to our tools . While exploring ghtop, we added several features to various fastai tools that we found to be generally useful. . ghapi Authentication . We added the function github_auth_device which allows users to authenticate their api client with GitHub interactively in a browser. When we call this function we get the following prompt: . github_auth_device() . First copy your one-time code: 276E-C910 Then visit https://github.com/login/device in your browser, and paste the code when prompted. Shall we try to open the link for you? [y/n] . The browser opens a window that looks like this: . . The function then returns an authenticated token which you can use for various tasks. While this is not the only way to create a token, this is a user friendly way to create a token, especially for those who are not as familiar with GitHub. . ghapi Events . As a result of our explorations with ghtop, we added an event module to ghapi. This is useful for retrieving and inspecting sample events. Inspecting sample events is important as it allows you to prototype GitHub Actions workflows locally. You can sample real events with load_sample_events: . from ghapi.event import load_sample_events evts = load_sample_events() . Individual events are formatted as markdown lists to be human readable in Jupyter: . print(evts[0]) . - id: 14517925737 - type: PushEvent - actor: - id: 17030246 - login: BeckhamL - display_login: BeckhamL - gravatar_id: - url: https://api.github.com/users/BeckhamL - avatar_url: https://avatars.githubusercontent.com/u/17030246? - repo: - id: 154349747 - name: BeckhamL/leetcode - url: https://api.github.com/repos/BeckhamL/leetcode - payload: - push_id: 6194986903 - size: 1 - distinct_size: 1 - ref: refs/heads/master - head: 2055b0fcf22f1c3543e38b60199f6882266d32a5 - before: cb16921949c969b5153a0c23ce8fe516d2c8d773 - commits: - - sha: 2055b0fcf22f1c3543e38b60199f6882266d32a5 - author: - email: beckham.lam@mail.mcgill.ca - name: Beckham Lam - message: Create detectCapital.ts - distinct: True - url: https://api.github.com/repos/BeckhamL/leetcode/commits/2055b0fcf22f1c3543e38b60199f6882266d32a5 - public: True - created_at: 2020-12-13T21:32:34Z . You can also inspect the json data in an event, which are accessible as attributes: . evts[0].type . &#39;PushEvent&#39; . For example, here is the frequency of all full_types in the sample: . x,y = zip(*Counter([o.full_type for o in evts]).most_common()) plt.figure(figsize=(8, 6)) plt.barh(x[::-1],y[::-1]); . We can fetch public events in parallel with GhApi.list_events_parallel. In our experiments, repeatedly calling list_events_parallel is fast enough to fetch all current public activity from all users across the entire GitHub platform. We use this for ghtop. Behind the scenes, list_events_parallel uses Python&#39;s ThreadPoolExecutor to fetch events in parallel - no fancy distributed systems or complicated infrastructure necessary, even at the scale of GitHub! . %time api = GhApi() evts = api.list_events_parallel() len(evts) . CPU times: user 2 µs, sys: 0 ns, total: 2 µs Wall time: 4.29 µs . 240 . Note that the GitHub API is stateless, so successive calls to the API will likely return events already seen. We handle this by using a set operations to filter out events already seen. . ghapi pagination . One of the most cumbersome aspects of fetching lots of data from the GitHub api can be pagination. As mentioned in the documentation, different endpoints have different pagination rules and defaults. Therefore, many api clients offer clunky or incomplete interfaces for pagination. . In ghapi we added an entire module with various tools to make paging easier. Below is an example for retrieving repos for the github org. Without pagination, we can only retrieve a fixed number at a time (by default 30): . api = GhApi() repos = api.repos.list_for_org(&#39;fastai&#39;) len(repos) . 30 . However, to get more we can paginate through paged: . from ghapi.event import paged repos = paged(api.repos.list_for_org, &#39;fastai&#39;) for page in repos: print(len(page), page[0].name) . 30 fast-image 30 fastforest 30 .github 8 tweetrel . You can learn more about this functionality by reading the docs. . fastcore Sparklines . Part of goals for refactoring ghtop were to introduce cool visualizations in the terminal of data. We drew inspiration from projects like bashtop, which have CLI interfaces that look like this: . Concretely, we really liked the idea of sparklines in the terminal. Therefore, we created the ability to show sparklines with fastcore: . from fastcore.utils import sparkline data = [9,6,None,1,4,0,8,15,10] print(f&#39;without &quot;empty_zero&quot;: {sparkline(data, empty_zero=False)}&#39;) print(f&#39; with &quot;empty_zero&quot;: {sparkline(data, empty_zero=True )}&#39;) . without &#34;empty_zero&#34;: ▅▂ ▁▂▁▃▇▅ with &#34;empty_zero&#34;: ▅▂ ▁▂ ▃▇▅ . For more information on this function, read the docs. Later in this post, we will describe how we used Rich to add color and animation to these sparklines. . fastcore EventTimer . Because we wanted streaming event data to automatically populate sparklines, we created EventTimer that constructs a histogram according to a frequency and time span you set. With EventTimer, you can add events with add, and get the number of events and their frequency: . from fastcore.utils import EventTimer from time import sleep import random def _randwait(): yield from (sleep(random.random()/200) for _ in range(100)) c = EventTimer(store=5, span=0.03) for o in _randwait(): c.add(1) print(f&#39;Num Events: {c.events}, Freq/sec: {c.freq:.01f}&#39;) print(&#39;Most recent: &#39;, sparkline(c.hist), *L(c.hist).map(&#39;{:.01f}&#39;)) . Num Events: 6, Freq/sec: 301.1 Most recent: ▃▁▁▇▁ 323.6 274.8 291.3 390.9 283.6 . For more information, see the docs. . CLI Animations With Rich . Rich is an amazing python library that allows you to create beautiful, animated and interactive CLI interfaces. Below is a preview of some its features: . Rich also offers animated elements like spinners: . ... and progress bars: . While this post is not about rich, we highly recommend visiting the repo and the docs to learn more. Rich allows you to create your own custom elements. We created two custom elements - Stats and FixedPanel, which we describe below: . Stats: Sparklines with metrics . Stats renders a group of sparklines along with a spinner and a progress bar. First we define our sparklines, the last argument being a list of event types to count: . from ghtop.richext import * from ghtop.all_rich import * console = Console() s1 = ESpark(&#39;Issues&#39;, &#39;green&#39;, [IssueCommentEvent, IssuesEvent]) s2 = ESpark(&#39;PR&#39;, &#39;red&#39;, [PullRequestEvent, PullRequestReviewCommentEvent, PullRequestReviewEvent]) s3 = ESpark(&#39;Follow&#39;, &#39;blue&#39;, [WatchEvent, StarEvent]) s4 = ESpark(&#39;Other&#39;, &#39;red&#39;) s = Stats([s1,s2,s3,s4], store=5, span=.1, stacked=True) console.print(s) . 🌍 Issues PR Follow Other Quota /min 0.0 0.0 0.0 0.0 ━━━━━━━ 0% . You can add events to update counters and sparklines with add_events: . evts = load_sample_events() s.add_events(evts) console.print(s) . 🌍 Issues PR Follow Other Quota /min 11772 ▁▇ 16546 ▁▇ 5991 ▁▇ 6484 ▁ ━━━━━━━ 0% . You can update the progress bar with the update_prog method: . s.update_prog(50) console.print(s) . 🌍 Issues PR Follow Other Quota /min 4076 ▁▇ 5408 ▁▇ 1834 ▁▇ 5998 ▁ ━━━╸━━━ 50% . Here is what the animated version looks like: . . FixedPanel: A panel with fixed height . A key aspect of ghtop is showing events in different panels. We created FixedPanel to allow us to arrange panels in a grid that we can incrementally add events to: . p = FixedPanel(15, box=box.HORIZONTALS, title=&#39;ghtop&#39;) for e in evts: p.append(e) grid([[p,p]]) . ─────────────────── ghtop ─────────────────── ────────────────── ghtop ─────────────────── 📪 dependabo…closed PR #3 o…herzli…&quot;Bump … 📪 dependabo…closed PR #3 …herzli…&quot;Bump … ⭐ dongjun13 pushed 1 commi…dongjun13/2 ⭐ dongjun13 pushed 1 comm…dongjun13/2 ⭐ admmonito…pushed 1 commi…admmonitors/t… ⭐ admmonito…pushed 1 comm…admmonitors/t… ⭐ randomper…pushed 1 commi…randomperson1… ⭐ randomper…pushed 1 comm…randomperson1… ⭐ ahocevar pushed 6 commi…openlayers/ope… ⭐ ahocevar pushed 6 commi…openlayers/op… 🏭 arjmoto created branch …arjmoto/redux-… 🏭 arjmoto created branch…arjmoto/redux-… 💬 stale[bot…created commen…ironha…&quot;This … 💬 stale[bot…created comme…ironha…&quot;This … ⭐ commit-b0…pushed 1 commi…commit-b0t/co… ⭐ commit-b0…pushed 1 comm…commit-b0t/co… ⭐ yakirgot pushed 2 commi…yakirgot/snake ⭐ yakirgot pushed 2 commi…yakirgot/snake 💬 awolf78 created comment…Impulse…&quot;If yo… 💬 awolf78 created commen…Impulse…&quot;If yo… ⭐ kreus7 pushed 1 commit…kreus7/kreusada… ⭐ kreus7 pushed 1 commit…kreus7/kreusad… ⭐ rgripper pushed 1 commi…rgripper/webco… ⭐ rgripper pushed 1 commi…rgripper/webc… 👀 thelittle…started watchi…ritchie46/pol… 👀 thelittle…started watch…ritchie46/pol… 🏭 adrian698 created branch…adrian698/Test 🏭 adrian698 created branc…adrian698/Test ⭐ mergify[b…pushed 2 commi…spbu-coding/6… ⭐ mergify[b…pushed 2 comm…spbu-coding/6… ───────────────────────────────────────────── ──────────────────────────────────────────── . To learn more about our extensions to rich see these docs. . A demo of ghtop animations . Putting all of this together, we get the following results: . 4 Panels with a sparkline for different types of events: . . single panel with a sparkline . . To learn more about ghtop, see the docs. . Interesting python features used . While making these docs, we used the following python features that at least one person we demoed it to found interesting or didn&#39;t know about. If you have been using python for sometime, you might know about all or most of these features: . yield from . Generators are a powerful feature of python, which are especially useful for iterating through large datasets lazily. . dequeue . f-strings .",
            "url": "https://patrick-hanley.github.io/thought_experiments/ghtop",
            "relUrl": "/ghtop",
            "date": " • Jan 29, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://patrick-hanley.github.io/thought_experiments/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://patrick-hanley.github.io/thought_experiments/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://patrick-hanley.github.io/thought_experiments/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}